
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA CTEF CTEI CTESTRING DIVIDE DOTCOMMA ELSE EQUALS FLOAT GT ID IF INT LKEY LPAREN LT MINUS NOTEQUAL PLUS PRINT PROGRAM RKEY RPAREN TIMES TWODOTS VARprogram : PROGRAM ID DOTCOMMA aa : vars bloque\n        | bloqueb : ID TWODOTS tipo DOTCOMMA\n        | ID COMMA b\n        | ID TWODOTS tipo DOTCOMMA bc : estatuto\n        | estatuto cd : expresion\n        | expresion COMMA d\n        | CTESTRING\n        | CTESTRING COMMA de : GT exp\n        | LT exp\n        | NOTEQUAL expf : bloque\n        | bloque ELSE bloquevars : VAR btipo : INT\n        | FLOATbloque : LKEY RKEY\n        | LKEY c RKEYestatuto : asignacion\n        | condicion\n        | escrituraasignacion : ID EQUALS expresion DOTCOMMAescritura : PRINT LPAREN d RPAREN DOTCOMMAexpresion : exp\n        | exp econdicion : IF LPAREN expresion RPAREN f DOTCOMMAexp : termino\n        | termino PLUS exp\n        | termino MINUS exptermino : factor\n        | factor TIMES exp\n        | factor DIVIDE expfactor : LPAREN expresion RPAREN\n        | PLUS varcte\n        | MINUS varcte\n        | varctevarcte : ID\n        | CTEI\n        | CTEF'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,7,10,13,24,],[0,-1,-3,-2,-21,-22,]),'ID':([2,8,9,15,16,17,18,23,26,27,28,37,38,40,48,49,51,52,53,54,55,58,59,63,64,76,79,],[3,12,19,19,-23,-24,-25,12,33,33,33,33,33,33,12,-26,33,33,33,33,33,33,33,33,33,-27,-30,]),'DOTCOMMA':([3,13,24,29,30,31,33,34,35,36,39,41,42,43,50,56,57,62,66,67,68,69,70,71,72,73,74,75,81,],[4,-21,-22,48,-19,-20,-41,49,-28,-31,-34,-40,-42,-43,-29,-38,-39,76,-13,-14,-15,-32,-33,-35,-36,-37,79,-16,-17,]),'VAR':([4,],[8,]),'LKEY':([4,6,11,32,48,61,65,80,],[9,9,-18,-5,-4,9,-6,9,]),'RKEY':([9,14,15,16,17,18,25,49,76,79,],[13,24,-7,-23,-24,-25,-8,-26,-27,-30,]),'IF':([9,15,16,17,18,49,76,79,],[20,20,-23,-24,-25,-26,-27,-30,]),'PRINT':([9,15,16,17,18,49,76,79,],[21,21,-23,-24,-25,-26,-27,-30,]),'TWODOTS':([12,],[22,]),'COMMA':([12,33,35,36,39,41,42,43,46,47,50,56,57,66,67,68,69,70,71,72,73,],[23,-41,-28,-31,-34,-40,-42,-43,63,64,-29,-38,-39,-13,-14,-15,-32,-33,-35,-36,-37,]),'ELSE':([13,24,75,],[-21,-22,80,]),'EQUALS':([19,],[26,]),'LPAREN':([20,21,26,27,28,40,51,52,53,54,55,58,59,63,64,],[27,28,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'INT':([22,],[30,]),'FLOAT':([22,],[31,]),'PLUS':([26,27,28,33,36,39,40,41,42,43,51,52,53,54,55,56,57,58,59,63,64,69,70,71,72,73,],[37,37,37,-41,54,-34,37,-40,-42,-43,37,37,37,37,37,-38,-39,37,37,37,37,-32,-33,-35,-36,-37,]),'MINUS':([26,27,28,33,36,39,40,41,42,43,51,52,53,54,55,56,57,58,59,63,64,69,70,71,72,73,],[38,38,38,-41,55,-34,38,-40,-42,-43,38,38,38,38,38,-38,-39,38,38,38,38,-32,-33,-35,-36,-37,]),'CTEI':([26,27,28,37,38,40,51,52,53,54,55,58,59,63,64,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'CTEF':([26,27,28,37,38,40,51,52,53,54,55,58,59,63,64,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'CTESTRING':([28,63,64,],[47,47,47,]),'TIMES':([33,39,41,42,43,56,57,73,],[-41,58,-40,-42,-43,-38,-39,-37,]),'DIVIDE':([33,39,41,42,43,56,57,73,],[-41,59,-40,-42,-43,-38,-39,-37,]),'GT':([33,35,36,39,41,42,43,56,57,69,70,71,72,73,],[-41,51,-31,-34,-40,-42,-43,-38,-39,-32,-33,-35,-36,-37,]),'LT':([33,35,36,39,41,42,43,56,57,69,70,71,72,73,],[-41,52,-31,-34,-40,-42,-43,-38,-39,-32,-33,-35,-36,-37,]),'NOTEQUAL':([33,35,36,39,41,42,43,56,57,69,70,71,72,73,],[-41,53,-31,-34,-40,-42,-43,-38,-39,-32,-33,-35,-36,-37,]),'RPAREN':([33,35,36,39,41,42,43,44,45,46,47,50,56,57,60,66,67,68,69,70,71,72,73,77,78,],[-41,-28,-31,-34,-40,-42,-43,61,62,-9,-11,-29,-38,-39,73,-13,-14,-15,-32,-33,-35,-36,-37,-10,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'a':([4,],[5,]),'vars':([4,],[6,]),'bloque':([4,6,61,80,],[7,10,75,81,]),'b':([8,23,48,],[11,32,65,]),'c':([9,15,],[14,25,]),'estatuto':([9,15,],[15,15,]),'asignacion':([9,15,],[16,16,]),'condicion':([9,15,],[17,17,]),'escritura':([9,15,],[18,18,]),'tipo':([22,],[29,]),'expresion':([26,27,28,40,63,64,],[34,44,46,60,46,46,]),'exp':([26,27,28,40,51,52,53,54,55,58,59,63,64,],[35,35,35,35,66,67,68,69,70,71,72,35,35,]),'termino':([26,27,28,40,51,52,53,54,55,58,59,63,64,],[36,36,36,36,36,36,36,36,36,36,36,36,36,]),'factor':([26,27,28,40,51,52,53,54,55,58,59,63,64,],[39,39,39,39,39,39,39,39,39,39,39,39,39,]),'varcte':([26,27,28,37,38,40,51,52,53,54,55,58,59,63,64,],[41,41,41,56,57,41,41,41,41,41,41,41,41,41,41,]),'d':([28,63,64,],[45,77,78,]),'e':([35,],[50,]),'f':([61,],[74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID DOTCOMMA a','program',4,'p_program','ScannerParser.py',84),
  ('a -> vars bloque','a',2,'p_a','ScannerParser.py',89),
  ('a -> bloque','a',1,'p_a','ScannerParser.py',90),
  ('b -> ID TWODOTS tipo DOTCOMMA','b',4,'p_b','ScannerParser.py',94),
  ('b -> ID COMMA b','b',3,'p_b','ScannerParser.py',95),
  ('b -> ID TWODOTS tipo DOTCOMMA b','b',5,'p_b','ScannerParser.py',96),
  ('c -> estatuto','c',1,'p_c','ScannerParser.py',100),
  ('c -> estatuto c','c',2,'p_c','ScannerParser.py',101),
  ('d -> expresion','d',1,'p_d','ScannerParser.py',105),
  ('d -> expresion COMMA d','d',3,'p_d','ScannerParser.py',106),
  ('d -> CTESTRING','d',1,'p_d','ScannerParser.py',107),
  ('d -> CTESTRING COMMA d','d',3,'p_d','ScannerParser.py',108),
  ('e -> GT exp','e',2,'p_e','ScannerParser.py',112),
  ('e -> LT exp','e',2,'p_e','ScannerParser.py',113),
  ('e -> NOTEQUAL exp','e',2,'p_e','ScannerParser.py',114),
  ('f -> bloque','f',1,'p_f','ScannerParser.py',118),
  ('f -> bloque ELSE bloque','f',3,'p_f','ScannerParser.py',119),
  ('vars -> VAR b','vars',2,'p_vars','ScannerParser.py',123),
  ('tipo -> INT','tipo',1,'p_tipo','ScannerParser.py',127),
  ('tipo -> FLOAT','tipo',1,'p_tipo','ScannerParser.py',128),
  ('bloque -> LKEY RKEY','bloque',2,'p_bloque','ScannerParser.py',132),
  ('bloque -> LKEY c RKEY','bloque',3,'p_bloque','ScannerParser.py',133),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','ScannerParser.py',137),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','ScannerParser.py',138),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','ScannerParser.py',139),
  ('asignacion -> ID EQUALS expresion DOTCOMMA','asignacion',4,'p_asignacion','ScannerParser.py',143),
  ('escritura -> PRINT LPAREN d RPAREN DOTCOMMA','escritura',5,'p_escritura','ScannerParser.py',147),
  ('expresion -> exp','expresion',1,'p_expresion','ScannerParser.py',151),
  ('expresion -> exp e','expresion',2,'p_expresion','ScannerParser.py',152),
  ('condicion -> IF LPAREN expresion RPAREN f DOTCOMMA','condicion',6,'p_condicion','ScannerParser.py',156),
  ('exp -> termino','exp',1,'p_exp','ScannerParser.py',160),
  ('exp -> termino PLUS exp','exp',3,'p_exp','ScannerParser.py',161),
  ('exp -> termino MINUS exp','exp',3,'p_exp','ScannerParser.py',162),
  ('termino -> factor','termino',1,'p_termino','ScannerParser.py',166),
  ('termino -> factor TIMES exp','termino',3,'p_termino','ScannerParser.py',167),
  ('termino -> factor DIVIDE exp','termino',3,'p_termino','ScannerParser.py',168),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','ScannerParser.py',172),
  ('factor -> PLUS varcte','factor',2,'p_factor','ScannerParser.py',173),
  ('factor -> MINUS varcte','factor',2,'p_factor','ScannerParser.py',174),
  ('factor -> varcte','factor',1,'p_factor','ScannerParser.py',175),
  ('varcte -> ID','varcte',1,'p_varcte','ScannerParser.py',179),
  ('varcte -> CTEI','varcte',1,'p_varcte','ScannerParser.py',180),
  ('varcte -> CTEF','varcte',1,'p_varcte','ScannerParser.py',181),
]
